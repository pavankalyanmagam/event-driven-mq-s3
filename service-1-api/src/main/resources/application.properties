server.port=8080
# Force the use of an embedded, in-memory ActiveMQ broker
# JMS Queues
job.submission.queue=job-submission-requests
job.persistence.queue=job-persistence-notifications
spring.activemq.packages.trust-all=true
# RabbitMQ Queue
## Define queue names for RabbitMQ
#rabbitmq.queue.submission=job-submission-requests
#rabbitmq.queue.persistence=job-persistence-notifications

# RabbitMQ Connection URI from CloudAMQP
#spring.rabbitmq.uri=amqps://ullacnxc:HZVKVsJE7Cz1kROfw24R2jc5qvkwfM1g@chimpanzee.rmq.cloudamqp.com/ullacnxc
# Database Connection
#spring.datasource.url=jdbc:postgresql://neondb_owner:npg_8yvHAKePxoJ4@ep-rapid-king-a4fc328z-pooler.us-east-1.aws.neon.tech/neondb?sslmode=require
#spring.datasource.username=postgres
#spring.datasource.password=pavankalyan
#spring.jpa.hibernate.ddl-auto=validate

# ===================================================================
#   CORRECT DATABASE CONFIGURATION FOR NEON POSTGRESQL
# ===================================================================

# 1. The URL (without username/password)
spring.datasource.url=jdbc:postgresql://ep-rapid-king-a4fc328z-pooler.us-east-1.aws.neon.tech/neondb?sslmode=require

# 2. Username and Password as separate properties
spring.datasource.username=neondb_owner
spring.datasource.password=npg_8yvHAKePxoJ4

# 3. Explicitly set the PostgreSQL Dialect to fix the second error
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# 4. Keep the DDL-auto setting
spring.jpa.hibernate.ddl-auto=validate

# ===================================================================

#spring.rabbitmq.host=localhost
#spring.rabbitmq.port=5673
#spring.rabbitmq.username=guest
#spring.rabbitmq.password=guest

#AWS S3 Configuration
aws.s3.bucket-name=delta-tc-upload-data
spring.cloud.aws.region.static=us-east-1
spring.cloud.aws.credentials.access-key=AKIAT2TQV6VS3D2KGCVQ
spring.cloud.aws.credentials.secret-key=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
# Add these lines for detailed AWS SDK debugging
logging.level.io.awspring=DEBUG
logging.level.software.amazon.awssdk=DEBUG

# Kafka Broker location for apps running OUTSIDE Docker
spring.kafka.bootstrap-servers=localhost:9092

# Kafka Topics
kafka.topic.submission=job-submission-requests
kafka.topic.persistence=job-persistence-notifications

# Kafka Consumer settings (example for service-2)
spring.kafka.consumer.group-id=persistence-group
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=*

# Kafka Producer settings (example for service-2)
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer